//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using ZyGames.Framework.Cache.Generic;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action1003 : AuthorizeAction
    {
        private CLSignIn m_RequestPacket;
        private LCSignIn m_ResponsePacket;
        private int m_UserId;

        public Action1003(ActionGetter actionGetter)
            : base((short)1003, actionGetter)
        {
            m_UserId = 0;
            m_RequestPacket = null;
            m_ResponsePacket = new LCSignIn();
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLSignIn>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            SetPlayerInfo();
            SetHeroInfo();
            SetHeroTeamInfo();
            SetAchivementInfo();
            SetDailyQuestInfo();
            return true;
        }
        private void SetHeroTeamInfo()
        {
            HeroTeamLogic heroTeam = new HeroTeamLogic();
            heroTeam.SetUser(m_UserId);
            CacheList<int> team = heroTeam.GetTeam();
            PBHeroTeamInfo heroTeamInfo = new PBHeroTeamInfo();
            foreach (int heroType in team)
            {
                heroTeamInfo.HeroType.Add(heroType);
            }
            m_ResponsePacket.HeroTeamInfo = heroTeamInfo;
        }
        private void SetHeroInfo()
        {
            PlayerHeroLogic playerHeros = new PlayerHeroLogic();
            playerHeros.SetUser(m_UserId);
            CacheDictionary<int, Hero> heros = playerHeros.GetHeroList();
            foreach (var hero in heros)
            {
                PBLobbyHeroInfo heroInfo = new PBLobbyHeroInfo();
                heroInfo.Type = hero.Key;
                heroInfo.Level = hero.Value.HeroLv;
                heroInfo.Exp = hero.Value.HeroExp;
                heroInfo.StarLevel = hero.Value.HeroStarLevel;
                heroInfo.ConsciousnessLevel = hero.Value.ConsciousnessLevel;
                heroInfo.ElevationLevel = hero.Value.ElevationLevel;
                heroInfo.SkillLevels.AddRange(hero.Value.SkillLevels);
                heroInfo.SkillExps.AddRange(hero.Value.SkillExps);
                heroInfo.Might = hero.Value.Might;
                foreach (var gear in hero.Value.Gears)
                {
                    if (gear.Value == 0)
                    {
                        continue;
                    }
                    PBGearInfo gearInfo = new PBGearInfo();
                    gearInfo.Id = gear.Value;
                    Gears gearData = CacheSet.GearCache.FindKey(gear.Value);
                    gearInfo.Level = gearData.Level;
                    gearInfo.StrengthenLevel = gearData.StrengthenLevel;
                    gearInfo.Type = gearData.TypeId;
                    heroInfo.GearInfo.Add(gearInfo);
                }
                foreach (var soul in hero.Value.Souls)
                {
                    if (soul.Value == 0)
                    {
                        continue;
                    }
                    PBSoulInfo soulInfo = new PBSoulInfo();
                    soulInfo.Id = soul.Value;
                    Souls soulData = CacheSet.SoulCache.FindKey(soul.Value);
                    soulInfo.Type = soulData.TypeId;
                    heroInfo.SoulInfo.Add(soulInfo);
                }
                m_ResponsePacket.LobbyHeroInfo.Add(heroInfo);
            }
        }
        private void SetPlayerInfo()
        {
            long nextRecoverTime;
            PBPlayerInfo playerInfo = new PBPlayerInfo();
            playerInfo.Id = m_UserId;
            PlayerLogic player = new PlayerLogic();
            player.SetUser(m_UserId);
            playerInfo.IsFemale = player.MyPlayer.IsFemale;
            playerInfo.Level = player.MyPlayer.Level;
            playerInfo.Money = player.MyPlayer.Money;
            playerInfo.Name = player.MyPlayer.Name;
            playerInfo.PortraitType = player.MyPlayer.PortraitType;
            playerInfo.Exp = player.MyPlayer.Exp;
            playerInfo.Energy = player.GetNewEnergy(out nextRecoverTime);
            playerInfo.NextEnergyRecoveryTime = nextRecoverTime;
            playerInfo.Coin = player.MyPlayer.Coin;
            playerInfo.MeridianEnergy = player.MyPlayer.StarEnergy;
            playerInfo.ArenaToken = player.MyPlayer.ArenaToken;
            playerInfo.Spirit = player.MyPlayer.Spirit;
            playerInfo.DisplayId = player.MyPlayer.UUID;
            playerInfo.PvpToken = player.MyPlayer.PvpToken;
            NearbyPlayerLogic np = new NearbyPlayerLogic();
            np.SetUser(m_UserId);
            playerInfo.PositionX = np.NearbyPlayers.MyPositionX;
            playerInfo.PositionY = np.NearbyPlayers.MyPositionY;
            m_ResponsePacket.PlayerInfo = playerInfo;
        }

        private void SetAchivementInfo()
        {
            var pa = PlayerAchievementLogic.GetInstance(m_UserId);
            m_ResponsePacket.AchievementInfo = new PBAchievementInfo();
            foreach (var trackingAchievement in pa.TrackingAchievements)
            {
                m_ResponsePacket.AchievementInfo.TrackingAchievements.Add(new PBTrackingAchievement()
                {
                    AchievementId = trackingAchievement.Value.Id,
                    ProgressCount = trackingAchievement.Value.Progress
                });
            }
            m_ResponsePacket.AchievementInfo.CompletedAchievements.AddRange(pa.CompletedAchievements);
        }

        private void SetDailyQuestInfo()
        {
            var pdq = PlayerDailyQuestLogic.GetInstance(m_UserId);
            m_ResponsePacket.DailyQuestInfo = new PBDailyQuestInfo();
            foreach (var trackingQuest in pdq.TrackingDailyQuests)
            {
                m_ResponsePacket.DailyQuestInfo.TrackingDailyQuests.Add(new PBTrackingDailyQuest()
                {
                    QuestId = trackingQuest.Key,
                    ProgressCount = trackingQuest.Value.Progress
                });
            }
            m_ResponsePacket.DailyQuestInfo.CompletedDailyQuests.AddRange(pdq.CompletedDailyQuests);
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
