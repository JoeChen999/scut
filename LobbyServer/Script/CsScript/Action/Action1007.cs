//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action1007 : AuthorizeAction
    {
        private CLBagInfo m_RequestPacket;
        private LCBagInfo m_ResponsePacket;
        private int m_UserId;

        public Action1007(ActionGetter actionGetter)
            : base((short)1007, actionGetter)
        {
            m_UserId = 0;
            m_RequestPacket = null;
            m_ResponsePacket = new LCBagInfo();
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLBagInfo>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerPackageLogic package = new PlayerPackageLogic();
            package.SetUser(m_UserId);
            SetItemInfo(package);
            SetGearInfo(package);
            SetSoulInfo(package);
            SetEpigraphInfo(package);
            return true;
        }

        private void SetItemInfo(PlayerPackageLogic package)
        {
            foreach (var item in package.MyPackage.Inventories)
            {
                if (item.Value == 0)
                {
                    package.MyPackage.Inventories.Remove(item.Key);
                    continue;
                }
                PBItemInfo itemInfo = new PBItemInfo();
                itemInfo.Type = item.Key;
                itemInfo.Count = item.Value;
                m_ResponsePacket.ItemInfo.Add(itemInfo);
            }
        }

        private void SetGearInfo(PlayerPackageLogic package)
        {
            foreach (var gear in package.MyPackage.Gears)
            {
                PBGearInfo gearInfo = new PBGearInfo();
                gearInfo.Id = gear.Key;
                Gears gearData = CacheSet.GearCache.FindKey(gear.Key);
                if (gearData == null)
                {
                    package.DeductGear(gear.Key);
                    continue;
                }
                gearInfo.Level = gearData.Level;
                gearInfo.Type = gearData.TypeId;
                gearInfo.StrengthenLevel = gearData.StrengthenLevel;
                m_ResponsePacket.GearInfo.Add(gearInfo);
            }
        }

        private void SetSoulInfo(PlayerPackageLogic package)
        {
            foreach (var soul in package.MyPackage.Souls)
            {
                PBSoulInfo soulInfo = new PBSoulInfo();
                soulInfo.Id = soul.Key;
                soulInfo.Type = soul.Value;
                m_ResponsePacket.SoulInfo.Add(soulInfo);
            }
        }

        private void SetEpigraphInfo(PlayerPackageLogic package)
        {
            foreach (var epigraph in package.MyPackage.Epigraphs)
            {
                PBEpigraphInfo epInfo = new PBEpigraphInfo();
                epInfo.Type = epigraph.Key;
                epInfo.Level = epigraph.Value;
                m_ResponsePacket.EpigraphInfo.Add(epInfo);
            }
        }
        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
