//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action3109 : AuthorizeAction
    {
        private CLGiveEnergyToFriend m_RequestPacket;
        private LCGiveEnergyToFriend m_ResponsePacket;
        private int m_UserId;

        public Action3109(ActionGetter actionGetter)
            : base((short)3109, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCGiveEnergyToFriend();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLGiveEnergyToFriend>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerFriendsLogic pf = new PlayerFriendsLogic();
            pf.SetUser(m_UserId);
            if (!pf.SendEnergy(m_RequestPacket.FriendPlayerId))
            {
                ErrorCode = (int)ErrorType.CannotOpenChance;
                ErrorInfo = "you can not send energy to this player";
                return false;
            }
            GameSession target = GameSession.Get(m_RequestPacket.FriendPlayerId);
            if (target != null)
            {
                LCGivenEnergyByFriend package = new LCGivenEnergyByFriend();
                package.FriendPlayerId = m_UserId;
                byte[] buffer = CustomActionDispatcher.GeneratePackageStream(3112, ProtoBufUtils.Serialize(package));
                target.SendAsync(buffer, 0, buffer.Length);
            }
            m_ResponsePacket.FriendPlayerId = m_RequestPacket.FriendPlayerId;
            m_ResponsePacket.RemainCount = GameConsts.Social.MaxSendCount - pf.MyFriends.SendCount;
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
