//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action1200 : AuthorizeAction
    {
        private CLUseItem m_RequestPacket;
        private LCUseItem m_ResponsePacket;
        private int m_UserId;

        public Action1200(ActionGetter actionGetter)
            : base((short)1200, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCUseItem();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLUseItem>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerHeroLogic ph = new PlayerHeroLogic();
            ph.SetUser(m_UserId).SetHero(m_RequestPacket.HeroId);
            foreach (var iteminfo in m_RequestPacket.Items)
            {
                ItemListItem item = new ItemListItem()
                {
                    Id = iteminfo.Type,
                    Count = iteminfo.Count
                };
                DTItem itemData = CacheSet.ItemTable.GetData(item.Id);
                PlayerPackageLogic pp = new PlayerPackageLogic();
                pp.SetUser(m_UserId);
                if (!pp.DeductInventory(item))
                {
                    ErrorCode = (int)ErrorType.RequireNotMet;
                    ErrorInfo = "You have not enough item";
                    return false;
                }
                
                switch ((ItemFunctions)itemData.FunctionId)
                {
                    case ItemFunctions.AddHeroExp:
                        ph.AddExp(int.Parse(itemData.FunctionParams) * item.Count);
                        var heroInfo = ph.GetHeroInfo();
                        m_ResponsePacket.HeroInfo = new PBLobbyHeroInfo()
                        {
                            Type = heroInfo.HeroType,
                            Level = heroInfo.HeroLv,
                            Exp = heroInfo.HeroExp,
                            Might = heroInfo.Might,
                        };
                        break;
                    case ItemFunctions.HeroPiece:
                        AddSpirit(item.Count);
                        break;
                    default:
                        break;
                }
                m_ResponsePacket.ItemInfo.Add(new PBItemInfo()
                {
                    Type = item.Id,
                    Count = pp.MyPackage.Inventories[item.Id]
                });
            }
            return true;
        }


        private void AddSpirit(int pieceCount)
        {
            PlayerLogic p = new PlayerLogic();
            p.SetUser(m_UserId);
            int spirit = pieceCount * GameConfigs.GetInt("Spirits_Per_Piece", 1);
            p.AddSpirit(spirit);
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo() 
            {
                Id = m_UserId,
                Spirit = p.MyPlayer.Spirit
            };
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
