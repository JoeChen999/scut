//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action2302 : AuthorizeAction
    {
        private CLGetArenaRankList m_RequestPacket;
        private LCGetArenaRankList m_ResponsePacket;
        private int m_UserId;

        public Action2302(ActionGetter actionGetter)
            : base((short)2302, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCGetArenaRankList();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLGetArenaRankList>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            ArenaRankLogic ar = new ArenaRankLogic();
            List<ArenaRank> rankList;
            if (ar.TryGetRankList(m_RequestPacket.PageIndex, out rankList))
            {
                m_ResponsePacket.IsLastPage = false;
            }
            else
            {
                m_ResponsePacket.IsLastPage = true;
            }
            m_ResponsePacket.MyRank = ar.GetPlayerRank(m_UserId);
            PlayerLogic p = new PlayerLogic();
            HeroTeamLogic ht = new HeroTeamLogic();
            foreach (var player in rankList)
            {
                PBArenaPlayerAndTeamInfo enemy = new PBArenaPlayerAndTeamInfo();
                enemy.Rank = player.RankId;
                p.SetUser(player.PlayerId);
                enemy.PlayerInfo = new PBPlayerInfo()
                {
                    Id = player.PlayerId,
                    Name = p.MyPlayer.Name,
                    Level = p.MyPlayer.Level,
                    PortraitType = p.MyPlayer.PortraitType
                };
                ht.SetUser(player.PlayerId);
                var team = ht.GetTeam();
                foreach (int hero in team)
                {
                    PBLobbyHeroInfo heroInfo = new PBLobbyHeroInfo() 
                    {
                        Type = hero
                    };
                    enemy.HeroTeam.Add(heroInfo);
                }
                m_ResponsePacket.Enemies.Add(enemy);
            }
            m_ResponsePacket.PageIndex = m_RequestPacket.PageIndex;
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
