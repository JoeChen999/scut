//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action2304 : AuthorizeAction
    {
        private CLEndArenaBattle m_RequestPacket;
        private LCEndArenaBattle m_ResponsePacket;
        private int m_UserId;

        public Action2304(ActionGetter actionGetter)
            : base((short)2304, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCEndArenaBattle();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLEndArenaBattle>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerArenaLogic pa = new PlayerArenaLogic();
            pa.SetUser(m_UserId);
            m_ResponsePacket.ChallengeCount = pa.MyArena.ChallengeCount;
            int token;
            if (!pa.EndBattle(m_RequestPacket.EnemyPlayerId, m_RequestPacket.Win, m_RequestPacket.IsRevenge, out token))
            {
                ErrorCode = (int)ErrorType.CannotOpenChance;
                ErrorInfo = "player is not in battle";
                return false;
            }
            PlayerLogic p = new PlayerLogic();
            p.SetUser(m_UserId);
            p.AddArenaToken(token);
            m_ResponsePacket.Me = new PBPlayerInfo()
            {
                Id = m_UserId,
                ArenaToken = p.MyPlayer.ArenaToken
            };
            p.SetUser(m_RequestPacket.EnemyPlayerId);
            ArenaRankLogic ar = new ArenaRankLogic();
            m_ResponsePacket.MyRank = ar.GetPlayerRank(m_UserId);
            m_ResponsePacket.Win = m_RequestPacket.Win;
            m_ResponsePacket.Enemy = new PBArenaPlayerAndTeamInfo()
            {
                Rank = ar.GetPlayerRank(m_RequestPacket.EnemyPlayerId)
            };
            m_ResponsePacket.Enemy.PlayerInfo = new PBPlayerInfo()
            {
                Id = m_RequestPacket.EnemyPlayerId,
                Name = p.MyPlayer.Name,
                PortraitType = p.MyPlayer.PortraitType,
                Level = p.MyPlayer.Level
            };

            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
