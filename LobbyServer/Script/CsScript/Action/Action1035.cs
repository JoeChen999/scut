//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action1035 : AuthorizeAction
    {
        private CLUpgradeSkill m_RequestPacket;
        private LCUpgradeSkill m_ResponsePacket;
        private int m_UserId;

        public Action1035(ActionGetter actionGetter)
            : base((short)1035, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCUpgradeSkill();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLUpgradeSkill>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerHeroLogic ph = new PlayerHeroLogic();
            ph.SetUser(m_UserId).SetHero(m_RequestPacket.HeroType);
            Hero hero = ph.GetHeroInfo();
            int skillLevel = hero.SkillLevels[m_RequestPacket.SkillIndex];
            DTSkillLevelUp skillData = CacheSet.SkillLevelUpTable.GetData(h=> (h.HeroType == m_RequestPacket.HeroType && h.SkillIndex == m_RequestPacket.SkillIndex && h.SkillLevel == skillLevel));
            PlayerLogic p = new PlayerLogic();
            p.SetUser(m_UserId);
            if (hero.HeroLv < skillData.RequiresHeroLevel || hero.HeroStarLevel < skillData.RequiresHeroStarLevel)
            {
                ErrorCode = (int)ErrorType.RequireNotMet;
                ErrorInfo = "require not met";
                return false;
            }
            PlayerPackageLogic pp = new PlayerPackageLogic();
            pp.SetUser(m_UserId);
            if (!p.DeductCoin(skillData.CoinCost))
            {
                ErrorCode = (int)ErrorType.RequireNotMet;
                ErrorInfo = "You do not have enough coin";
                return false;
            }
            if(!ph.SkillLevelUp(m_RequestPacket.SkillIndex, skillData.CostEXP))
            {
                ErrorCode = (int)ErrorType.RequireNotMet;
                ErrorInfo = "You do not have enough exp";
                return false;
            }

            m_ResponsePacket.HeroInfo = new PBLobbyHeroInfo()
            {
                Type = hero.HeroType,
            };
            m_ResponsePacket.HeroInfo.SkillLevels.AddRange(hero.SkillLevels);
            m_ResponsePacket.HeroInfo.SkillExps.AddRange(hero.SkillExps);
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
