//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action2005 : AuthorizeAction
    {
        private CLEnterChessBattle m_RequestPacket;
        private LCEnterChessBattle m_ResponsePacket;
        private int m_UserId;

        public Action2005(ActionGetter actionGetter)
            : base((short)2005, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCEnterChessBattle();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLEnterChessBattle>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerChessLogic playerChess = new PlayerChessLogic();
            playerChess.SetUser(m_UserId);
            Transaction t = new Transaction();
            t.DumpEntity(playerChess.MyChess);
            if(playerChess.MyChess.HP.ContainsKey(playerChess.MyChess.MyTeam[0]) && playerChess.MyChess.HP[playerChess.MyChess.MyTeam[0]] == 0)
            {
                m_ResponsePacket.Success = false;
                return true;
            }
            foreach (int heroId in playerChess.MyChess.MyTeam)
            {
                if (playerChess.MyChess.HP.ContainsKey(heroId) && playerChess.MyChess.HP[heroId] == 0)
                {
                    playerChess.MyChess.MyTeam.Remove(heroId);
                }
            }
            if (playerChess.MyChess.MyTeam.Count == 0)
            {
                t.RollBack();
                m_ResponsePacket.Success = false;
                return true;
            }
            m_ResponsePacket.HeroTeam = new PBHeroTeamInfo();
            m_ResponsePacket.HeroTeam.HeroType.AddRange(playerChess.MyChess.MyTeam);
            m_ResponsePacket.Success = true;
            m_ResponsePacket.InstanceTypeId = 1;
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
