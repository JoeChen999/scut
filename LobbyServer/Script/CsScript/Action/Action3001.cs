//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action3001 : AuthorizeAction
    {
        private CLSendChat m_RequestPacket;
        private LCSendChat m_ResponsePacket;
        private int m_UserId;

        public Action3001(ActionGetter actionGetter)
            : base((short)3001, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCSendChat();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLSendChat>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerLogic p = new PlayerLogic();
            p.SetUser(m_UserId);
            Player sender = p.MyPlayer;
            string message;
            if (!ChatProvider.ProcessMessage(m_UserId, m_RequestPacket.Massage, out message))
            {
                ErrorCode = (int)ErrorType.CannotOpenChance;
                ErrorInfo = "illegal message";
                return false;
            }
            switch ((ChatType)m_RequestPacket.Type)
            {
                case ChatType.World:
                    if (!ChatProvider.SendWorld(sender, message))
                    {
                        ErrorCode = (int)ErrorType.ChatTooFrequency;
                        ErrorInfo = "You can not chat too frequency";
                    }
                    break;
                case ChatType.Private:
                    Player receiver = PlayerLogic.FindUserByName(m_RequestPacket.ReceiverName);
                    if (receiver == null)
                    {
                        ErrorCode = (int)ErrorType.PlayerNotExist;
                        ErrorInfo = "Target Player is not Exist";
                        return false;
                    }
                    if (!ChatProvider.SendPrivate(receiver.Id, sender, message))
                    {
                        ErrorCode = (int)ErrorType.PlayerNotOnline;
                        ErrorInfo = "Target Player is not online";
                        return false;
                    }
                    break;
                case ChatType.Room:
                    break;
                case ChatType.Alliance:
                    break;
                default:
                    ErrorCode = (int)ErrorType.CannotOpenChance;
                    ErrorInfo = "wrong type Id";
                    return false;
            }
            m_ResponsePacket.Type = m_RequestPacket.Type;
            m_ResponsePacket.Success = true;
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
