//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action2003 : AuthorizeAction
    {
        private CLBombChessBoard m_RequestPacket;
        private LCBombChessBoard m_ResponsePacket;
        private int m_UserId;

        public Action2003(ActionGetter actionGetter)
            : base((short)2003, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCBombChessBoard();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLBombChessBoard>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerChessLogic chess = new PlayerChessLogic();
            chess.SetUser(m_UserId);
            int coin;
            int money;
            int starEnergy;
            Dictionary<int, int> rewardItems = chess.BombAll(out coin, out money, out starEnergy);
            if (rewardItems == null)
            {
                ErrorCode = (int)ErrorType.RequireNotMet;
                ErrorInfo = "Money not enough";
                return false;
            }
            chess.MyChess.GotCoin += coin;
            m_ResponsePacket.RewardCoins = coin;
            chess.MyChess.GotMoney += money;
            m_ResponsePacket.RewardMoney = money;
            chess.MyChess.GotStarEnergy += starEnergy;
            m_ResponsePacket.RewardStarEnergy = starEnergy;
            PlayerPackageLogic package = new PlayerPackageLogic();
            package.SetUser(m_UserId);
            PBReceivedItems receivedItems;
            package.GetItems(rewardItems, ReceiveItemMethodType.TurnOverChess, out receivedItems);
            m_ResponsePacket.ReceivedItems = receivedItems;
            foreach (var gear in m_ResponsePacket.ReceivedItems.GearInfo)
            {
                chess.MyChess.GotGears.Add(gear.Id);
            }
            foreach (var inventory in m_ResponsePacket.ReceivedItems.ItemInfo)
            {
                if (chess.MyChess.GotItems.ContainsKey(inventory.Type))
                {
                    chess.MyChess.GotItems[inventory.Type] += inventory.Count;
                }
                else
                {
                    chess.MyChess.GotItems.Add(inventory.Type, inventory.Count);
                }
            }
            foreach (var soul in m_ResponsePacket.ReceivedItems.SoulInfo)
            {
                chess.MyChess.GotSouls.Add(soul.Id);
            }
            foreach (var epigraph in m_ResponsePacket.ReceivedItems.EpigraphInfo)
            {
                chess.MyChess.GotEpigraphs.Add(epigraph.Type);
            }
            m_ResponsePacket.Success = true;
            PlayerLogic player = new PlayerLogic();
            player.SetUser(m_UserId);
            player.MyPlayer.Coin += coin;
            player.MyPlayer.Money += money;
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo() { Coin = player.MyPlayer.Coin, Money = player.MyPlayer.Money };
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
