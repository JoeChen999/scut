//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action3201 : AuthorizeAction
    {
        private CLOpenEmail m_RequestPacket;
        private LCOpenEmail m_ResponsePacket;
        private int m_UserId;

        public Action3201(ActionGetter actionGetter)
            : base((short)3201, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCOpenEmail();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLOpenEmail>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerMailLogic pm = new PlayerMailLogic();
            pm.SetUser(m_UserId);
            Dictionary<int,int> itemReward = new Dictionary<int,int>();
            PlayerLogic p = new PlayerLogic();
            p.SetUser(m_UserId);
            m_ResponsePacket.AllSuccessful = true;
            foreach (int id in m_RequestPacket.OpenEmailIds)
            {
                var reward = pm.OpenMail(id);
                if(reward == null)
                {
                    m_ResponsePacket.AllSuccessful = false;
                    continue;
                }
                else
                {
                    m_ResponsePacket.OpenedEmailIds.Add(id);
                }
                if (reward.Id < GameConsts.MinGearId)
                {
                    GetPlayerReward(reward, p);
                }
                else
                {
                    if (itemReward.ContainsKey(reward.Id))
                    {
                        itemReward[reward.Id] += reward.Count;
                    }
                    else
                    {
                        itemReward.Add(reward.Id, reward.Count);
                    }
                }
            }
            PlayerPackageLogic pp = new PlayerPackageLogic();
            pp.SetUser(m_UserId);
            PBReceivedItems receivedItems;
            pp.GetItems(itemReward, ReceiveItemMethodType.None, out receivedItems);
            m_ResponsePacket.ReceivedItems = receivedItems;
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo()
            {
                Id = m_UserId,
                Coin = p.MyPlayer.Coin,
                Money = p.MyPlayer.Money,
                Energy = p.MyPlayer.Energy,
                MeridianEnergy = p.MyPlayer.StarEnergy
            };
            return true;
        }

        private void GetPlayerReward(ItemListItem reward, PlayerLogic p)
        {
            
            long nextRecoverTime;
            switch ((GiftItemType)reward.Id)
            {
                case GiftItemType.Coin:
                    p.AddCoin(reward.Count);
                    break;
                case GiftItemType.Energy:
                    p.AddEnergy(reward.Count, out nextRecoverTime);
                    break;
                case GiftItemType.MeridianEnergy:
                    p.AddStarEnergy(reward.Count);
                    break;
                case GiftItemType.Money:
                    p.AddMoney(reward.Count);
                    break;
            }
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
