//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using Genesis.GameServer.CommonLibrary;
using System;
using System.Collections.Generic;
using ZyGames.Framework.Cache.Generic;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action1026 : AuthorizeAction
    {
        private CLCompleteStoryInstance m_RequestPacket;
        private LCCompleteStoryInstance m_ResponsePacket;
        private int m_UserId;

        public Action1026(ActionGetter actionGetter)
            : base((short)1026, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCCompleteStoryInstance();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLCompleteStoryInstance>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            DTInstanceStory instanceData = CacheSet.InstanceStoryTable.GetData(m_RequestPacket.InstanceId);
            PlayerHeroLogic ph = new PlayerHeroLogic();
            ph.SetUser(m_UserId).SetHero(instanceData.HeroId);
            if (ph.GetHeroInfo() == null)
            {
                ErrorCode = (int)ErrorType.RequireNotMet;
                ErrorInfo = "You can not enter this instance";
                return false;
            }
            PlayerStoryInstanceLogic ps = new PlayerStoryInstanceLogic();
            ps.SetUser(m_UserId);
            CacheDictionary<int, int> dropItems = new CacheDictionary<int, int>();
            foreach (int dropId in instanceData.DropIds)
            {
                var itemDict  = ps.GetDropItems(dropId, m_RequestPacket.StarLevel);
                dropItems = GameUtils.MergeItemDict(dropItems, itemDict) as CacheDictionary<int, int>;
            }
            PlayerPackageLogic pp = new PlayerPackageLogic();
            pp.SetUser(m_UserId);
            PBReceivedItems receivedItems;
            pp.GetItems(dropItems, ReceiveItemMethodType.CompleteInstance, out receivedItems);
            m_ResponsePacket.ReceivedItems = receivedItems;
            m_ResponsePacket.Count = ps.GetCount();
            m_ResponsePacket.StarLevel = m_RequestPacket.StarLevel;
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
