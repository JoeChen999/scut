//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action1031 : AuthorizeAction
    {
        private CLGetNewHeroByPieces m_RequestPacket;
        private LCGetNewHeroByPieces m_ResponsePacket;
        private int m_UserId;

        public Action1031(ActionGetter actionGetter)
            : base((short)1031, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCGetNewHeroByPieces();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLGetNewHeroByPieces>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            var heroData = CacheSet.HeroTable.GetData(m_RequestPacket.HeroId);
            PlayerPackageLogic package = new PlayerPackageLogic();
            package.SetUser(m_UserId);
            ItemListItem item = new ItemListItem();
            item.Id = heroData.StarLevelUpItemId;
            item.Count = heroData.StarLevelUpItemCount[0];
            if (!package.DeductInventory(item))
            {
                ErrorCode = (int)ErrorType.RequireNotMet;
                ErrorInfo = "you have not enough item";
                return false;
            }
            PlayerHeroLogic ph = new PlayerHeroLogic();
            ph.SetUser(m_UserId);
            ph.AddNewHero(m_RequestPacket.HeroId, ReceiveItemMethodType.HeroPieceCompose);
            var heroInfo = ph.GetHeroInfo();
            m_ResponsePacket.NewHero = new PBLobbyHeroInfo()
            {
                Type = heroInfo.HeroType,
                Level = heroInfo.HeroLv,
                ElevationLevel = heroInfo.ElevationLevel,
                ConsciousnessLevel = heroInfo.ConsciousnessLevel,
                Exp = heroInfo.HeroExp,
                StarLevel = heroInfo.HeroStarLevel
            };
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
