//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using Genesis.GameServer.CommonLibrary;
using System;
using ZyGames.Framework.Common.Configuration;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action1304 : AuthorizeAction
    {
        private CLGetWorldSinglePvpRank m_RequestPacket;
        private LCGetWorldSinglePvpRank m_ResponsePacket;
        private int m_UserId;

        public Action1304(ActionGetter actionGetter)
            : base((short)1304, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCGetWorldSinglePvpRank();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLGetWorldSinglePvpRank>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            LWGetWorldSinglePvpRank package = new LWGetWorldSinglePvpRank()
            {
                UserId = m_UserId,
                ServerId = int.Parse(ConfigUtils.GetSetting("Server.Id"))
            };
            WorldServerSender.Send("LWGetWorldSinglePvpRankHandler", package, delegate (RemotePackage callback)
            {
                var res = RemoteCommunication.ParseRemotePackage<WLGetWorldSinglePvpRank>(callback.Message as byte[]);
                m_ResponsePacket.MyRank = res.MyRank;
                m_ResponsePacket.MyScore = res.MyScore;
                for(int i = 0; i < res.PlayerInfo.Count; i++)
                {
                    m_ResponsePacket.PlayerInfo.Add(new PBPlayerInfo() {
                        Id = res.PlayerInfo[i].Id,
                        Name = res.PlayerInfo[i].Name,
                        PortraitType = res.PlayerInfo[i].PortraitType,
                    });
                    m_ResponsePacket.ServerId.Add(res.ServerId[i]);
                    m_ResponsePacket.Score.Add(res.Score[i]);
                }
                var buff = CustomActionDispatcher.GeneratePackageStream(actionGetter.GetActionId(), ProtoBufUtils.Serialize(m_ResponsePacket));
                GameSession.Get(m_UserId).SendAsync(buff, 0, buff.Length);
            });
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            //CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
