//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using ZyGames.Framework.Cache.Generic;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action2002 : AuthorizeAction
    {
        private CLOpenChessField m_RequestPacket;
        private LCOpenChessField m_ResponsePacket;
        private int m_UserId;

        private int m_GotCoin = 0;
        private int m_GotMoney = 0;
        private int m_GotStarEnergy = 0;
        private CacheDictionary<int, int> m_GotItems = new CacheDictionary<int, int>();

        public Action2002(ActionGetter actionGetter)
            : base((short)2002, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCOpenChessField();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLOpenChessField>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerChessLogic playerChess = new PlayerChessLogic();
            playerChess.SetUser(m_UserId);
            if (!RefreshData(playerChess))
            {
                return false;
            }
            
            if (m_RequestPacket.HasEnemyAnger)
            {
                playerChess.SetEnemyAnger(m_RequestPacket.FieldId, m_RequestPacket.EnemyAnger);
            }
            if (m_RequestPacket.EnemyHeroesHP.Count > 0)
            {
                playerChess.SetEnemyStatus(m_RequestPacket.FieldId, m_RequestPacket.EnemyHeroesHP);
            }
            if (m_RequestPacket.HasMyAnger)
            {
                playerChess.SetMyAnger(m_RequestPacket.MyAnger);
            }
            if (m_RequestPacket.MyHeroesStatus.Count > 0)
            {
                playerChess.SetMyHeroStatus(m_RequestPacket.MyHeroesStatus);
                m_ResponsePacket.MyHeroesStatus.AddRange(m_RequestPacket.MyHeroesStatus);
            }
            if (m_RequestPacket.HasBattleWon && !m_RequestPacket.BattleWon)
            {
                m_ResponsePacket.Success = true;
                return true;
            }
            GetReward(playerChess);
            PlayerLogic player = new PlayerLogic();
            player.SetUser(m_UserId);
            player.MyPlayer.Money += m_GotMoney;
            player.MyPlayer.Coin += m_GotCoin;
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo() { Coin = player.MyPlayer.Coin, Money = player.MyPlayer.Money };
            return true;
        }

        private bool RefreshData(PlayerChessLogic playerChess)
        {
            int costFieldCount = 0;
            int freeFieldCount = 0;
            int totalCostFreeCount = 0;
            Transaction t = new Transaction();
            t.DumpEntity(playerChess.MyChess);
            PlayerPackageLogic package = new PlayerPackageLogic();
            package.SetUser(m_UserId);
            foreach (var field in m_RequestPacket.ModifiedChessField)
            {
                var oldField = playerChess.MyChess.ChessBoard[field.Index];
                int oldColor = oldField.Color == ChessFieldColor.Empty || oldField.Color == ChessFieldColor.EmptyGray || oldField.Color == ChessFieldColor.RewardGray ?
                    (int)ChessFieldColor.EmptyGray : (int)oldField.Color;
                if (field.Color != oldColor)
                {
                    t.RollBack();
                    ErrorCode = (int)ErrorType.CannotOpenChance;
                    ErrorInfo = "illegal params";
                    return false;
                }
                if (field.Color == (int)ChessFieldColor.EmptyGray)
                {
                    RewardChessField oldRewardField = oldField as RewardChessField;
                    if (!oldRewardField.IsOpened && field.IsOpened)
                    {
                        if (!oldRewardField.IsFree)
                        {
                            if (m_RequestPacket.ModifiedChessField.Count == 1)
                            {
                                costFieldCount += 1;
                            }
                            else
                            {
                                freeFieldCount += 1;
                            }
                        }
                        else
                        {
                            freeFieldCount += 1;
                        }
                        m_GotCoin += oldRewardField.RewardCoin;
                        m_GotMoney += oldRewardField.RewardMoney;
                        m_GotStarEnergy += oldRewardField.RewardStarEnergy;
                        foreach (var reward in oldRewardField.RewardItems)
                        {
                            if (m_GotItems.ContainsKey(reward.Key))
                            {
                                m_GotItems[reward.Key] += reward.Value;
                            }
                            else
                            {
                                m_GotItems.Add(reward);
                            }
                        }
                        PlayerPackageLogic pp = new PlayerPackageLogic();
                        pp.SetUser(m_UserId);
                        if (!pp.CheckPackageSlot(m_GotItems))
                        {
                            ErrorCode = (int)ErrorType.PackageSlotFull;
                            ErrorInfo = "item count if full";
                            return false;
                        }
                        playerChess.DeductOpenCount();
                    }
                    oldRewardField.IsFree = field.IsFree;
                    oldRewardField.IsOpened = field.IsOpened;
                    oldRewardField.ParentId = field.Parent;
                }
                else
                {
                    BattleChessField oldBattleField = oldField as BattleChessField;
                    if (!oldBattleField.IsOpened && field.IsOpened)
                    {
                        m_ResponsePacket.FreeCount = oldBattleField.Count;
                        costFieldCount += 1;
                        oldBattleField.IsOpened = field.IsOpened;
                        PlayerDailyQuestLogic.GetInstance(m_UserId).UpdateDailyQuest(DailyQuestType.WinTurnOverChessBattle, 1);
                    }
                    else
                    {
                        if (field.FreeCount < 0 || field.FreeCount > oldBattleField.Count)
                        {
                            ErrorCode = (int)ErrorType.CannotOpenChance;
                            ErrorInfo = "illegal params";
                            return false;
                        }
                        totalCostFreeCount += oldBattleField.Count - field.FreeCount;
                        oldBattleField.Count = field.FreeCount;
                    }
                    oldBattleField.ChildrenId.AddRange(field.Children);
                }
            }
            if (freeFieldCount != totalCostFreeCount)
            {
                t.RollBack();
                ErrorCode = (int)ErrorType.CannotOpenChance;
                ErrorInfo = "illegal params";
                return false;
            }
            if (costFieldCount > 1)
            {
                t.RollBack();
                ErrorCode = (int)ErrorType.CannotOpenChance;
                ErrorInfo = "illegal params";
                return false;
            }
            playerChess.MyChess.Count -= costFieldCount;
            return true;
        }

        public void GetReward(PlayerChessLogic playerChess)
        {
            playerChess.MyChess.GotCoin += m_GotCoin;
            playerChess.MyChess.GotMoney += m_GotMoney;
            playerChess.MyChess.GotStarEnergy += m_GotStarEnergy;
            PlayerPackageLogic package = new PlayerPackageLogic();
            package.SetUser(m_UserId);
            PBReceivedItems receivedItems;
            package.GetItems(m_GotItems, ReceiveItemMethodType.TurnOverChess, out receivedItems);
            m_ResponsePacket.ReceivedItems = receivedItems;
            foreach (var gear in m_ResponsePacket.ReceivedItems.GearInfo)
            {
                playerChess.MyChess.GotGears.Add(gear.Id);
            }
            foreach (var inventory in m_ResponsePacket.ReceivedItems.ItemInfo)
            {
                if (playerChess.MyChess.GotItems.ContainsKey(inventory.Type))
                {
                    playerChess.MyChess.GotItems[inventory.Type] += inventory.Count;
                }
                else
                {
                    playerChess.MyChess.GotItems.Add(inventory.Type, inventory.Count);
                }
            }
            foreach (var soul in m_ResponsePacket.ReceivedItems.SoulInfo)
            {
                playerChess.MyChess.GotSouls.Add(soul.Id);
            }
            foreach (var epigraph in m_ResponsePacket.ReceivedItems.EpigraphInfo)
            {
                playerChess.MyChess.GotEpigraphs.Add(epigraph.Type);
            }
            m_ResponsePacket.Success = true;
            m_ResponsePacket.RewardCoins = m_GotCoin;
            m_ResponsePacket.RewardMoney = m_GotMoney;
            m_ResponsePacket.RewardStarEnergy = m_GotStarEnergy;
            m_ResponsePacket.FieldId = m_RequestPacket.FieldId;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
