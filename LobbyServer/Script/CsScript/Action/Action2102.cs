//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action2102 : AuthorizeAction
    {
        private CLInviteFriendForGearFoundry m_RequestPacket;
        private LCInviteFriendForGearFoundry m_ResponsePacket;
        private int m_UserId;

        public Action2102(ActionGetter actionGetter)
            : base((short)2102, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCInviteFriendForGearFoundry();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLInviteFriendForGearFoundry>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            GameSession target = GameSession.Get(m_RequestPacket.FriendPlayerId);
            if (target == null)
            {
                ErrorCode = (int)ErrorType.PlayerNotOnline;
                ErrorInfo = "Player is not online";
                return false;
            }
            PlayerFoundryLogic pf = new PlayerFoundryLogic();
            pf.SetUser(m_UserId);
            PlayerLogic p = new PlayerLogic();
            p.SetUser(m_UserId);
            int teamId = pf.GetPlayerFoundryInfo().CurrentRoomId;
            if(teamId < 0){
                ErrorCode = (int)ErrorType.RequireNotMet;
                ErrorInfo = "You are not in a room";
                return false;
            }
            if (CacheSet.FoundryRoomCache.FindKey(teamId).Players[0] != m_UserId)
            {
                ErrorCode = (int)ErrorType.RequireNotMet;
                ErrorInfo = "You have not this permission";
                return false;
            }
            LCInvitedForGearFoundry package = new LCInvitedForGearFoundry();
            package.TeamId = teamId;
            package.InviterPlayer = new PBPlayerInfo()
            {
                Id = m_UserId,
                Name = p.MyPlayer.Name,
                Level = p.MyPlayer.Level,
                PortraitType = p.MyPlayer.PortraitType
            };
            byte[] buffer = CustomActionDispatcher.GeneratePackageStream(2112, ProtoBufUtils.Serialize(package));
            target.SendAsync(buffer, 0, buffer.Length);
            m_ResponsePacket.FriendPlayerId = m_RequestPacket.FriendPlayerId;
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
