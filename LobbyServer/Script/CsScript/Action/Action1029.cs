//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action1029 : AuthorizeAction
    {
        private CLSellGoods m_RequestPacket;
        private LCSellGoods m_ResponsePacket;
        private int m_UserId;

        public Action1029(ActionGetter actionGetter)
            : base((short)1029, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCSellGoods();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLSellGoods>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            PlayerPackageLogic pp = new PlayerPackageLogic();
            pp.SetUser(m_UserId);
            PlayerLogic player = new PlayerLogic();
            player.SetUser(m_UserId);
            int totalCoin = 0;
            foreach (var item in m_RequestPacket.SoldItems)
            {
                ItemListItem tmpItem = new ItemListItem()
                {
                    Id = item.Type,
                    Count = item.Count
                };
                if (!pp.DeductInventory(tmpItem))
                {
                    ErrorCode = (int)ErrorType.RequireNotMet;
                    ErrorInfo = "You have not enough item";
                    return false;
                }
                DTItem itemData = CacheSet.ItemTable.GetData(item.Type);
                totalCoin += item.Count * itemData.Price;
                m_ResponsePacket.ItemInfo.Add(item);
            }
            foreach (var gear in m_RequestPacket.SoldGears)
            {
                if (!pp.DeductGear(gear.Id))
                {
                    ErrorCode = (int)ErrorType.RequireNotMet;
                    ErrorInfo = "You have not this gear";
                    return false;
                }
                DTGear gearData = CacheSet.GearTable.GetData(gear.Type);
                totalCoin += gearData.Price;
                m_ResponsePacket.GearInfo.Add(gear);
            }
            player.AddCoin(totalCoin);
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo()
            {
                Id = player.MyPlayer.Id,
                Coin = player.MyPlayer.Coin
            };
            return true;
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
