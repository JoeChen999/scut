//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'TakeAction' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using ZyGames.Framework.Common.Serialization;
using ZyGames.Framework.Game.Contract;
using ZyGames.Framework.Game.Contract.Action;
using ZyGames.Framework.Game.Service;

namespace Genesis.GameServer.LobbyServer
{
    public class Action100 : AuthorizeAction
    {
        private CLGMCommand m_RequestPacket;
        private LCGMCommand m_ResponsePacket;
        private int m_UserId;

        public Action100(ActionGetter actionGetter)
            : base((short)100, actionGetter)
        {
            m_RequestPacket = null;
            m_ResponsePacket = new LCGMCommand();
            m_UserId = 0;
        }

        public override bool GetUrlElement()
        {
            m_UserId = actionGetter.GetSession().UserId;
            m_RequestPacket = ProtoBufUtils.Deserialize<CLGMCommand>((byte[])actionGetter.GetMessage());
            return true;
        }

        public override bool TakeAction()
        {
            switch ((GMCommandType)m_RequestPacket.Type)
            {
                case GMCommandType.AddMoney:
                    AddMoney(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.AddCoin:
                    AddCoin(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.AddGear:
                    AddGear(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.AddItem:
                    AddItem(m_RequestPacket.Params[0], m_RequestPacket.Params[1]);
                    break;
                case GMCommandType.AddHero:
                    AddHero(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.AddSoul:
                    AddSoul(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.AddEnergy:
                    AddEnergy(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.HeroLevelUp:
                    HeroLevelUp(m_RequestPacket.Params[0], m_RequestPacket.Params[1]);
                    break;
                case GMCommandType.PlayerLevelUp:
                    PlayerLevelUp(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.MeridianEnergyUp:
                    AddMeridianEnergy(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.AddEpigraphItem:
                    AddEpigraph(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.AddSpirit:
                    AddSpirit(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.AddArenaToken:
                    AddArenaToken(m_RequestPacket.Params[0]);
                    break;
                case GMCommandType.AddPvpToken:
                    AddPvpToken(m_RequestPacket.Params[0]);
                    break;
                default:
                    break;
            }
            m_ResponsePacket.Type = m_RequestPacket.Type;
            m_ResponsePacket.Params.AddRange(m_RequestPacket.Params);
            return true;
        }

        private void HeroLevelUp(int heroId, int addLevel)
        {
            PlayerHeroLogic ph = new PlayerHeroLogic();
            ph.SetUser(m_UserId).SetHero(heroId);
            if (!ph.DataCheck())
            {
                return;
            }
            ph.AddLevel(addLevel);
            m_ResponsePacket.LobbyHeroInfo = new PBLobbyHeroInfo()
            {
                Type = heroId,
                Level = ph.MyHeros.Heros[heroId].HeroLv,
                Exp = ph.MyHeros.Heros[heroId].HeroExp
            };
        }

        private void PlayerLevelUp(int level)
        {
            PlayerLogic player = new PlayerLogic();
            player.SetUser(m_UserId);
            player.AddLevel(level);
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo()
            {
                Id = player.MyPlayer.Id,
                Level = player.MyPlayer.Level,
                Exp = player.MyPlayer.Exp
            };
        }

        private void AddMoney(int money)
        {
            PlayerLogic player = new PlayerLogic();
            player.SetUser(m_UserId);
            player.AddMoney(money);
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo()
            {
                Id = player.MyPlayer.Id,
                Money = player.MyPlayer.Money
            };
        }

        private void AddMeridianEnergy(int energy)
        {
            PlayerLogic player = new PlayerLogic();
            player.SetUser(m_UserId);
            player.AddStarEnergy(energy);
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo()
            {
                Id = player.MyPlayer.Id,
                MeridianEnergy = player.MyPlayer.StarEnergy
            };
        }

        private void AddCoin(int coin)
        {
            PlayerLogic player = new PlayerLogic();
            player.SetUser(m_UserId);
            player.AddCoin(coin);
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo(){
                Id = player.MyPlayer.Id,
                Coin = player.MyPlayer.Coin
            };
        }

        private void AddGear(int gearType)
        {
            GearLogic gear = new GearLogic();
            int gearId = gear.AddNewGear(gearType, m_UserId, ReceiveItemMethodType.None);
            PlayerPackageLogic pp = new PlayerPackageLogic();
            pp.SetUser(m_UserId);
            pp.AddGear(gearId, gearType);
            m_ResponsePacket.GearInfo = new PBGearInfo()
            {
                Id = gearId,
                Type = gearType,
                Level = gear.MyGear.Level,
                StrengthenLevel = gear.MyGear.StrengthenLevel
            };
        }

        private void AddItem(int itemId, int count)
        {
            PlayerPackageLogic pp = new PlayerPackageLogic();
            pp.SetUser(m_UserId);
            ItemListItem item = new ItemListItem();
            item.Id = itemId;
            item.Count = count;
            pp.AddInventory(item);
            m_ResponsePacket.ItemInfo = new PBItemInfo()
            {
                Type = itemId,
                Count = pp.MyPackage.Inventories[itemId]
            };
        }

        private void AddHero(int heroId)
        {
            PlayerHeroLogic ph = new PlayerHeroLogic();
            ph.SetUser(m_UserId);
            if (ph.AddNewHero(heroId) == null)
            {
                m_ResponsePacket.LobbyHeroInfo = new PBLobbyHeroInfo()
                {
                    Type = ph.MyHeros.Heros[heroId].HeroType,
                    Level = ph.MyHeros.Heros[heroId].HeroLv,
                    Exp = ph.MyHeros.Heros[heroId].HeroExp,
                    StarLevel = ph.MyHeros.Heros[heroId].HeroStarLevel,
                    ConsciousnessLevel = ph.MyHeros.Heros[heroId].ConsciousnessLevel,
                    ElevationLevel = ph.MyHeros.Heros[heroId].ElevationLevel,
                    Might = ph.MyHeros.Heros[heroId].Might,
                };
                m_ResponsePacket.LobbyHeroInfo.SkillExps.AddRange(ph.MyHeros.Heros[heroId].SkillExps);
                m_ResponsePacket.LobbyHeroInfo.SkillLevels.AddRange(ph.MyHeros.Heros[heroId].SkillLevels);
            }
        }

        private void AddSoul(int soulType)
        {
            SoulLogic soul = new SoulLogic();
            int soulId = soul.AddNewSoul(soulType);
            PlayerPackageLogic package = new PlayerPackageLogic();
            package.SetUser(m_UserId);
            package.AddSoul(soulId, soulType);
            m_ResponsePacket.SoulInfo = new PBSoulInfo()
            {
                Id = soulId,
                Type = soulType,
            };
        }

        private void AddEnergy(int energy)
        {
            PlayerLogic player = new PlayerLogic();
            player.SetUser(m_UserId);
            long nextRecoverTime;
            player.AddEnergy(energy,out nextRecoverTime);
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo()
            {
                Id = player.MyPlayer.Id,
                Energy = player.MyPlayer.Energy,
                NextEnergyRecoveryTime = nextRecoverTime
            };
        }

        private void AddEpigraph(int type)
        {
            PlayerPackageLogic pp = new PlayerPackageLogic();
            pp.SetUser(m_UserId);
            ItemListItem item;
            pp.GetNewEpigraph(type, out item);
            m_ResponsePacket.EpigraphInfo = new PBEpigraphInfo()
            {
                Type = type,
                Level = pp.MyPackage.Epigraphs[type]
            };
        }

        private void AddSpirit(int spirit)
        {
            PlayerLogic p = new PlayerLogic();
            p.SetUser(m_UserId);
            p.AddSpirit(spirit);
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo()
            {
                Id = p.MyPlayer.Id,
                Spirit = p.MyPlayer.Spirit
            };
        }

        private void AddArenaToken(int token)
        {
            PlayerLogic p = new PlayerLogic();
            p.SetUser(m_UserId);
            p.AddArenaToken(token);
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo()
            {
                Id = p.MyPlayer.Id,
                ArenaToken = p.MyPlayer.ArenaToken
            };
        }

        private void AddPvpToken(int token)
        {
            PlayerLogic p = new PlayerLogic();
            p.SetUser(m_UserId);
            p.AddPvpToken(token);
            m_ResponsePacket.PlayerInfo = new PBPlayerInfo()
            {
                Id = p.MyPlayer.Id,
                PvpToken = p.MyPlayer.ArenaToken
            };
        }

        public override void WriteResponse(BaseGameResponse response)
        {
            CustomActionDispatcher.ResponseOK(response, actionGetter, ProtoBufUtils.Serialize(m_ResponsePacket));
        }
    }
}
